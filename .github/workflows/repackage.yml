name: Repackage MCP Images
permissions:
  id-token: write
  contents: write
  packages: write
  actions: read
  security-events: write

on:
  workflow_dispatch:
  push:
    branches:
      - main
    tags:
      - "v*"
    paths:
      - repackaging/**

jobs:
  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Generate matrix from images.yaml
        id: set-matrix
        run: |
          matrix=$(yq eval -o=json '.images[] |select(.type != null) |= pick(["name", "type", "package","version"])' repackaging/images.yaml |jq -cs .)
          echo "matrix=$matrix" >> $GITHUB_OUTPUT

  repackage:
    needs: generate-matrix
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
    runs-on: depot-ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Depot
        uses: depot/setup-action@v1

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if image already exists
        id: check-image
        run: |
          IMAGE_TAG="ghcr.io/${{ github.repository }}/${{ matrix.name }}:${{ matrix.version }}"
          if docker manifest inspect "$IMAGE_TAG" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Image $IMAGE_TAG already exists, skipping build"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Image $IMAGE_TAG does not exist, will build"
          fi

      - name: Build and push python-based image
        if: ${{ matrix.type == 'python' && steps.check-image.outputs.exists == 'false' }}
        uses: depot/build-push-action@v1
        id: build-python
        with:
          project: bbqjs4tj1g
          context: .
          push: true
          pull: true
          file: repackaging/Dockerfile.mcp-python
          platforms: linux/amd64,linux/arm64
          build-args: |
            MCP_PACKAGE=${{ matrix.package }}
            MCP_VERSION=${{ matrix.version }}
            BASE_TAG=main
          tags: |
            ghcr.io/${{ github.repository }}/${{ matrix.name }}:${{ matrix.version }}

      - name: Build and push node-based image
        if: ${{ matrix.type == 'node' && steps.check-image.outputs.exists == 'false' }}
        uses: depot/build-push-action@v1
        id: build-node
        with:
          project: bbqjs4tj1g
          context: .
          push: true
          pull: true
          file: repackaging/Dockerfile.mcp-node
          platforms: linux/amd64,linux/arm64
          build-args: |
            MCP_PACKAGE=${{ matrix.package }}
            MCP_VERSION=${{ matrix.version }}
            BASE_TAG=main
          tags: |
            ghcr.io/${{ github.repository }}/${{ matrix.name }}:${{ matrix.version }}

      - name: Setup crane
        if: ${{ matrix.type == 'docker' }}
        uses: imjasonh/setup-crane@v0.4

      - name: Retag existing docker image
        if: ${{ matrix.type == 'docker' && steps.check-image.outputs.exists == 'false' }}
        run: |
          crane copy ${{ matrix.package }}:${{ matrix.version }} ghcr.io/${{ github.repository }}/${{ matrix.name }}:${{ matrix.version }}

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.8.1
        with:
          cosign-release: "v2.4.3"

      - name: Sign python image
        if: ${{ matrix.type == 'python' && steps.check-image.outputs.exists == 'false' }}
        env:
          DIGEST: ${{ steps.build-python.outputs.digest }}
          TAGS: |
            ghcr.io/${{ github.repository }}/${{ matrix.name }}:${{ matrix.version }}
        run: |
          images=""
          for tag in ${TAGS}; do
            if [ -n "$tag" ]; then
              images+="${tag}@${DIGEST} "
            fi
          done
          cosign sign --yes ${images}

      - name: Sign node image
        if: ${{ matrix.type == 'node' && steps.check-image.outputs.exists == 'false' }}
        env:
          DIGEST: ${{ steps.build-node.outputs.digest }}
          TAGS: |
            ghcr.io/${{ github.repository }}/${{ matrix.name }}:${{ matrix.version }}
        run: |
          images=""
          for tag in ${TAGS}; do
            if [ -n "$tag" ]; then
              images+="${tag}@${DIGEST} "
            fi
          done
          cosign sign --yes ${images}

      - name: Run Trivy
        if: steps.check-image.outputs.exists == 'true' || steps.build-python.outputs.digest != '' || steps.build-node.outputs.digest != ''
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ghcr.io/${{ github.repository }}/${{ matrix.name }}:${{ matrix.version }}
          skip-dirs: "**/venv"
          format: "sarif"
          output: "trivy-results-${{ matrix.name }}-${{ matrix.version }}.sarif"

      - name: Upload SARIF file
        if: steps.check-image.outputs.exists == 'true' || steps.build-python.outputs.digest != '' || steps.build-node.outputs.digest != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results-${{ matrix.name }}-${{ matrix.version }}.sarif

      - name: Generate SBOM
        if: steps.check-image.outputs.exists == 'true'
        uses: anchore/sbom-action@v0.20.5
        with:
          image: ghcr.io/${{ github.repository }}/${{ matrix.name }}:${{ matrix.version }}
          artifact-name: sbom-${{ matrix.name }}-${{ matrix.version }}.spdx.json
          dependency-snapshot: true
          upload-artifact-retention: 90
